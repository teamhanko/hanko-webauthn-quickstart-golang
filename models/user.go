// Package models provides persistence using Boltdb, a simple key value store. It's supposed to show how
// to handle additional data besides using the Hanko Authentication API.
package models

import (
	"github.com/boltdb/bolt"
)

// User represents a minimalistic relying party user. The Hanko Authentication API will manage credentials not users,
// so you need to persists user information by your own.
type User struct {
	ID   string // contains the user id, generated by the relying party
	Name string // contains the user name
}

// NewUser creates a new user object.
func NewUser(id string, name string) *User {
	return &User{ID: id, Name: name}
}

// FindUserByName used to look up the user with the specified user name.
func FindUserByName(name string) (user *User, err error) {
	err = DB.View(func(tx *bolt.Tx) error {
		b := tx.Bucket([]byte("Users"))
		v := b.Get([]byte(name))
		if len(v) != 0 {
			user = &User{ID: string(v), Name: name}
		}
		return nil
	})
	return user, err
}

// Save persists the user information.
func (u *User) Save() (err error) {
	err = DB.Update(func(tx *bolt.Tx) error {
		b := tx.Bucket([]byte("Users"))
		return b.Put([]byte(u.Name), []byte(u.ID))
	})
	return err
}
